// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
	@if $self {
		&,
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	} @else {
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	}
}

/// Specify the state of links
/// @param {String} $link
/// @param {String} $visit
/// @param {String} $hover
/// @param {String} $active
/// @require colors
/// @TODO
// - when link is clicked, color does not change
@mixin link($link, $visit, $hover, $active) {
	color: $link;

	&:visited {
		color: $visit;
	}
	&:hover {
		@include transition(color, 0.2s, ease-in);
		color: $hover;
	}
	&:active {
		color: $active;
	}
}

/// Specify padding, use null if no space should be used
/// @param {Number} $top
/// @param {Number} $right
/// @param {Number} $bottom
/// @param {Number} $left
/// @require Size
@mixin padding($top, $right, $bottom, $left) {
	padding-top: $top;
	padding-right: $right;
	padding-bottom: $bottom;
	padding-left: $left;
}

/// Specify margin, use null if no space should be used
/// @param {Number} $top
/// @param {Number} $right
/// @param {Number} $bottom
/// @param {Number} $left
/// @require Size
@mixin margin($top, $right, $bottom, $left) {
	margin-top: $top;
	margin-right: $right;
	margin-bottom: $bottom;
	margin-left: $left;
}

/// Transition property, create an animation
/// @param {String} $property - Property you are animating
/// @param {Number} $duration
/// @param {String} $timing
@mixin transition($property: all, $duration: 0.2s, $timing: linear) {
	transition: $property $duration $timing;
}

/// Specify own flexbox styles
/// @param {Boolean} $justify-content
/// @param {Boolean} $flex
/// @param {Boolean} $flex-direction
/// @param {Boolean} $align-items
@mixin flex-config(
	$justify-content: false,
	$flex: false,
	$flex-direction: false,
	$align-items: false
) {
	display: flex;

	@if $justify-content != false {
		justify-content: $justify-content;
	}

	@if $flex != false {
		flex: $flex;
	}

	@if $flex-direction != false {
		flex-direction: $flex-direction;
	}

	@if $align-items != false {
		align-items: $align-items;
	}
}

/// Handles the default css for ::before and ::after
/// @param {String} $display - how pseudo element will be displayed
/// @param {String} $pos - Position of element => absolute, relative, etc.
/// @param {String} $content - defaults to the needed empty quotes
@mixin pseudo($display: block, $pos: absolute, $content: '') {
	content: $content;
	display: $display;
	position: $pos;
}

/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
	// If the key exists in the map
	@if map-has-key($break-points, $breakpoint) {
		// Prints a media query based on the value
		@media (min-width: map-get($break-points, $breakpoint)) {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
              + "Available breakpoints are: #{map-keys($break-points)}.";
	}
}

/// Automatically centers an element
@mixin push--auto {
	margin: {
		left: auto;
		right: auto;
	}
}

/// Removes the end of an element if it passes the specified boundary/width
/// @param {String} $truncation-boundary - max-width
/// @require $truncation-boundary
@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}
